1--七层网络模型

2--Socket与TCP、UDP
	Socket: 
		简单来说是IP地址与端口的结合协议 RFC793
		一种地址与端口的结合秒速协议
		TCP/IP协议的相关API的总称;是网络API的集合实现
		涵盖了:Stream Socket/Datagram Socket  (TCP/UDP)

	Socket的作用与组成:
		在网络传输中用于唯一标示两个端点之间的链接
		端点:包括(ip+port)
		4个要素:客户端地址、客户端端口、服务器地址、服务器端口
	
	Socket传输原理:
		socket=ip+port
	
	Socket之TCP:
        TCP是面向链接的通行协议
		通过三次握手建立连接、通讯完成时要拆除连接
		由于TCP是面向链接的所以只能用于端到端的通讯
		
	Socket之UDP:
		UDP是面向无限接的通讯协议
		UDP数据包括目的端口号和源端口信息
		由于通讯不需要连接、所以可以实现广播发送、并不局限于端到端
		
	TCP传输图解:
		客户端   ---TCP Data--> 服务器
		         <--TCP ACK --- 
	
	UDP传输图解:
		客户端   ---UDP Data--> 客户端群
		         ---UDP Data-->
				 ---UDP Data-->
    
	Client-Server Application:
		TCP/IP协议中,两个进程间通行的主要模式为:CS模型
		主要目的:协同网络中的计算机资源,服务模式、进程间数据共享
		常见的:FTP,SMTP,HTTP
		
	报文、协议、Mac地址
		报文段:
			报文段是指TCP/IP协议网络传输过程中,起着路由导航作用
			用以查询各个网络路由网段、IP地址、交换协议等IP数据包
			报文段充当整个TCP/IP协议数据包的导航路由功能
			报文在传输过程中会不断地封装成分组、包、帧传输
			封装方式就是添加一些控制信息组成的首部、即报文头
			
		传输协议:
			协议顾名思义,一种规定,约束
			约定大于配置,在网络传输中依然使用;网络的传输流程是健壮的,稳定的,得益于基础的协议构成
			简单来说:A->B的传输数据,B能识别,反之,B->A的传输数据A也能识别,这就是协议
			
		Mac地址:
			Media Access Control 或者 Medium Access Control
			意译为媒体访问控制,或者称为物理地址,硬件地址
			用来定义网络设备的位置
			形如:44-45-53-34-00-00;与身份证类似
	
	IP、端口、远程服务器:
		互联网协议地址(Internet Protocol Address), IP Address
		是分配给网络上使用网际协议的设备的数字标签
		常见:ipv4,ipv6
		ipv4:
			32位:xxx.xxx.xxx.xxx
			分为A,B,C,D,E五大类,其中E类属于特殊保留地址
			总数量42亿个,(2^32),最终于2011.2.3用完了
			主机号全是1,为广播地址
			ip:255.255.255.255为受限广播协议,理论来说往这个地址发生UDP协议,会发送给整个局域网,但是会被防火墙拦截
		ipv6:
			128位,32个十六位进制数
			由:64位的网络前缀和一个64位的主机地址,主机地址通常由物理地址自动生成,叫做EUI-64(或者64-位扩展唯一标识)
		ipv4能转换为ipv6,ipv6不一定能转换为ipv6
		
		端口:
			ip的下一级
			0到1023号端口和1024到49151号端口都是特殊端口
			2021 -- FTP  TCP
			22   -- SSH
			80   -- HTTP
			等等...
			
			计算机依照互联网传输层TCP/IP协议的协议通讯,不同协议都对应不同的端口
			49152-65535号端口属于"动态端口"范围,没有端口可以被正式注册占用
			端口号总数:65536,连接能建立多少个?-->大于65536(一机多ip)
			
		数据传输层次
								           Data___
							     UDPHeader+UDPData
				        IPHeader+IPData___________
			FrameHeader+FrameData_________________+FrameFooter
			
		远程服务器:
			局域网:一般而言,家里的环境,公司相互电脑之间环境都属于局域网
			远端的电脑连接属于互联网,非局域网
			默认的:远端的电脑无法直接连接
			
				局域网内部的设备是连接的   <----X---->  其他局域网
				
				局域网1 <--->  服务器(ip) <---> 
				网2
				
				Web请求流程
				局域网ip                                                  互联网服务器ip
				You(192.168.1.112) [TCP/1351]   <----> UDP/53  for DNS    Web Server (110.90.45.6)
												<----> TCP/80  for HTTP  
												<----> TCP/443 for HTTPS

3.Socket-UDP 快速入门:
	UDP(User Datagram Protocol)
	一种用户数据报协议,又称用户数据报文协议
	是一个简单的面向数据报的传输层协议,正式规范为RFC 768
	用户数据协议,非连接协议
	
	为什么不可靠:
		只把数据发出去,不保留备份
		UDP在IP数据报的头部仅仅加入了复用和数据校验(字段)
		发送端生产数据,接收端从网络中抓取数据
		结构简单、无校验、速度快、容易丢包、可广播
	
	UDP能做什么:
		DNS、TFTP、SNMP
		视屏、音频、普通数据(无关紧要数据)
		头部:64位:0~15:Source Port, 16~31:Destination Port, 32~47:Length, 48~63:Head and Data Checksum
		UDP包最大长度
			16位->2字节 存储长度信息
			2^16-1 = 65535
			头部:自身长度占用:32+32位=64位=8字节
			最多65535-8=65527byte
	
	UDP核心API
		API-DatagramSocket
			用于接收与发送UDP的类
			负责发送某一个UDP包,或者接收UDP包
			不同于TCP,UDP并没有合并到Socket API中
			(没有服务器和客户端,可认为是客户端又是服务端)
			
			DatagramSocket()创建简单实例,不指定端口与IP
			DatagramSocket(int port)创建监听固定端口的实例  ,接听
			DatagramSocket(int port, InetAddress localAddr)创建固定端口指定IP的实例, 监听
			
			receive(DatagramPacket d):接收
			send(DataframPacket d):发送
			setSoTimeout(int timeout):设置超时,毫秒
			close():关闭、释放资源
		
		API-DatagramPacket
			用于处理报文
			将byte数组、(目标地址)、目标端口等数据包封装成报文或者将报文拆卸成byte数组
			是UDP的发送和接收实体
			
			DatagramPacket(byte[] buf, int offset, int length, InetAddress address, int port)
			前3个参数是buf的使用区间,后2个参数是指定目标机器地址与端口(发送时有效)
			
			DatagramPacket(byte[] buf, int offset, int length, SocketAddress address)
			SocketAddress 相当于 InetAddress + port
			
			setData(byte[] buf, int offset, int length)
			setData(byte[] buf)
			setlength(int length)
			getData(),getOffset(),getLength()
			
			// 发送时有效
			setAddress(InetAddress address)
			setPort(int port)
			setSocketAddress(SocketAddress address)
			get...
		
		UDP单播,多播,广播
			单播 1 v 1
			多播 1 v n(一组,如:所有男生)
			广播 1 v all (一个局域网所有设备, 或者局域网外的设备)
			
			ip有个图~~~
		
			广播地址
				255.255.255.255为受限广播协议
				C网广播地址一般为:xxx.xxx.xxx.255(如:192.168.1.255)
				D类广播地址为多播预留
				
				运算
					IP:192.168.124.7 
					子网掩码:255.255.255.000
					网络地址:192.168.124.0
					广播地址:192.168.124.255
					
					IP:192.168.124.7  (属于第一个网段)
					子网掩码:255.255.255.192(1100 0000)-->网段(2^2=4)(00,01,10,11)-->(0~63,64~127,128~191,192~255)
					网络地址:192.168.124.0 (第一个地址)
					广播地址:192.168.124.63(最后一个地址)
					
				广播通讯问题
					主机一:192.168.124.7,子网掩码255.255.255.192
					主机二:192.168.124.100,子网掩码255.255.255.192
					主机一广播地址:192.168.124.63
					主机二广播地址:192.168.124.127
					主机一无法直接广播到主机二,哪怕发送受限广播地址
			
			实例:
				单播:
					A、B计算机信息交互
					A ----> B 过程
					B监听2000
					A往2000发送,此时A会有一个随机端口(如1000)
					B收到A,可以获得A的ip+port
					B回送信息给A
					A是否接收1000端口,由A决定
					
				广播:
					A发送被B,C,D
					B,C,D先监听20000
					A监听30000端口 (先~)
					A往255.255.255.255::20000发数据
					B,C,D收到后往30000端口回送消息
					A接收到B,C,D的信息
					
					有一方收不到数据,考虑排查是不是发送端口出错,还是接收端口出错,就是匹配不上
				
4.Socket-TCP 快速入门:			
	TCP是什么?
		Transmission Control Protocol
		传输控制协议,是一个面向连接的,可靠的,基于字节流的
		与UDP一样完成第四层传输层所指定的功能与职责
	
	TCP机制:
		三次握手,四次挥手
		具备校验机制,可靠,数据传输稳定
	
	TCP能做什么:
		聊天消息传输,推送
		单人语言,视屏聊天
		几乎UDP能做的,TCP也行
		无法广播,多播
			
	TCP核心API:
		socket() : 创建一个Socket
		bind() : 绑定一个Socket到本地地址和端口上
		connect() : 发起连接
		accept() : 接受一个新的连接
		write() : 把数据写入到Socket输出流
		read() : 从Socket输出流读数据
		
	使用流程:
		创建Socket() -> bind本地套接字(独占) -> connect()
		创建ServerSocket() -> bind本地套接字(独占) -> accept()
			
		
	Socket与进程的关系:
		一个进程可以创建多个Socket
		process -> socket -> TCP     ---Internet--- TCP <- socket <- process
		程序控制             操作系统控制TCP
		
	TCP连接可靠性:
		全双工(可互相发送数据)
		三次握手 -- 其实就是两重校验,1:我可以连接你吗,你可以连接我吗
		Sender                  Receiver
		SYN(X=rand()) --------> 
					  <--------	SYN(x+1) ACK(y=rand())
		ACK(x+1,y+1)  -------->
		Application Data
		
		四次挥手
		Client                  Server
		FIN=1,Seq=u   -------->
	    (断开输出流)  <--------	ACK=1,seq=v,ack=u+1
								wait():发生一些未发完的数据 (这里是要拆为两步的关键)
					  <--------	FIN=1,ACK=1,seq=w,ack=u+1 (持续发送,直到接到ACK,默认2分组,linux30秒) (关闭输出流)
		ACK=1,seq=v,ack=w+1 -->
		
	TCP传输可靠性
		排序,顺序发送,顺序组装(前面的到达后面的才能到达)
		丢弃,超时
		重发机制-定时器
		图
			发送方          接收方
			(发生缓冲区)    (接收缓冲区)
			(指针移动来发生)
			数据拆包
			一个一个发       一个一个接收,并且回复
			对超时回复的重新反送(重传有最大次数限定)
			丢包重传
			连接中断,重连,再发(没收到回执的)
			
	实例实操
		TCP传输初始化配置
			初始化服务器TCP链接监听
			初始化客户端发起链接操作
			服务器Socket链接处理
		客户端与服务器交互
			客户端发送简单字节
			服务器接收客户端发送数据
			服务器回送消息,客户端识别回送消息
			
			
5.UDP辅助TCP实现点对点传输案例
	
	不知道地址,有端口
	客户端 -- UDP搜索得到服务端的ip+port
	服务端 -- 判断是否要处理--回送
	建立TCP连接
	
	1.构建基础口令消息
	2.局域网广播口令消息(指定端口)
	3.接收指定端口回送消息(得到客服端IP,Port)
	-----------------------------------------
	UDP搜索取消实现
	异步线程接收回送消息
	异步线程等待完成(定时)
	关闭等待-终止线程等待
	-----------------------------------------
	步骤：
		1:服务器开启TCP监听A
		2:服务器开启UDP监听B
		3:客户端开启UDP监听回送端口C
		4:客户端发起UDP搜索B
			--发送约定的信息,回送端口C
		5:服务器UDP端口B接收到客服端信息:
			--检验客户端信息是否合法正确
			--检验通过--发送服务器信息(端口A)到客户端的端口C
		6:客户端收到服务器信息,向服务器端口A发起TCP连接
		7:服务器端口A接收到客户端的信息后,构建异步线程处理信息
	-----------------------------------------
	数据发送与接收并行
		1.多线程收发并行
		2.TCP多线程收发协作
		
6.简易聊天室实现
	设计:
		必要条件:客户端,服务器
		必要约束:数据传输协议
		原理:服务器监听消息来源,客户端链接服务器并发送消息到服务器
		交互:
			Client send-request->recv Server
				   rece<-request-send
		
		数据传输协议:String("hello") -> byte[5] -输出-> byte[6](尾部追加换行符)
		
		客户端 --发送数据--> 服务器 --转发数据--> 客户端

	服务器状态(分析):
		繁忙
		每个客户端都需要服务器进行双通等待
		双通:客户端发送数据到服务器的接受通道
		双通:服务器回送消息的发送通道

		一个客户端:双通->2n线程
		n个客户端:2n条线程
		服务器实际线程数量:2n+m(gc,main,监听客户端现场,转发线程....)
		
		jconsole -- 进程压测分析
		jvisualVM -- 功能更强大的

		服务器性能数据分析
			CPU:取决于数据的频繁性,数据的转发复杂性
			内存:取决于客户端的数量,客户端发送的数据大小
			线程:取决于连接的客户端的数量

		服务器优化方案分析
			减少线程数量
			增加线程执行繁忙状态
			客户端Buffer复用机制

7.阻塞IO和非阻塞IO
	阻塞IO线程消耗:
		ServerSocker.accept() 一个客户端 -- Thread A:read(),write(),close()
		2n+m(约13)个线程 -- 多线程切换对CPU消耗很大,CPU扫描线程,维护线程的状态,IO调度,用户态和内核态的切换都是花费很大的内存的
	
	非阻塞IO线程优势:
		A --- |							    | 监听客户端来源					
		B --- |							    | 客户端建立连接
		C --- | --> NIO --> Main Thread --> | 输出数据到客户端
		D --- |		服务器				    | 读取客户端数据
		E --- |							    |
	
	NIO == Non-blocking I/O
		JDK 1.4引入
		在标准Java代码中提供了高速的.可伸缩性的.面向快的.非阻塞的IO操作
		如:
			注册:当有连接来了,注册监听
			发数据:通知网卡要发送数据后就干自己的事,网卡空闲后通知主线程空闲了,主线程再发送数据
			收数据:客户端有数据到达才收到回调主线程处理数据,否则干自己的事

	NIO Family 一览
		Buffer缓存区:用于数据处理的基础单元,客户端发送于接受数据都通过Buffer转发进行
		Channel通道:类似于流;但,不同于IN/OUT Stream;流具有独占性于单向性;通道则偏向于数据的流通多样性
		Selectors选择器:处理客户端所有时间的分发器

		Charset扩展部分
			Charset字符编码:加密，解密
			原生支持的,数据通道级别的数据处理方式,可以用于数传输级别的数据加密,解密等操作
		
		Buffer包括:ByteBuffer,CharBuffer,ShortBuffer,IntBuffer,LongBuffer,FloatBuffer,DoubleBuffer
		于传统的不同,写数据时先写到Buffer -> Channel;读则反之
		为NIO块状操作提供基础,数据按"块"进行传输
		一个Buffer代表一块数据

		可以从通道中获取数据也可以输出数据到通道,按"块"进行
		可以并发异步读写数据
		读取数据必须通过Buffer
		包括:FileChannel，SocketChannel, DatagramChannel等
		
	NIO常用API学习
				    NIO-职责
				向Selector注册事件--当Channel可读/写-->处理到Buffer中
		Selector-----|----Channel    Buffer
				-----|----Channel    Buffer
				-----|----Channel    Buffer
						  多种Channel
						  多种Buffer

		SelectionKey.OP_CONNECT连接就绪
		SelectionKey.OP_ACCEPT接受就绪
		SelectionKey.OP_READ读就绪(读写取决于网卡状态)
		SelectionKey.OP_WRITE写就绪

		Selector使用流程
			open()开启一个选择器,可以给选择器注册需要关注的事件
			register()将一个Channel注册到选择器,当选择器触发对应关注事件时回调到Channel中,处理相关数据
			select/selectNow()一个通道Channel,处理一个当前的可用,待处理的通道数据 -- 阻塞状态
			selectedKeys()得到当前就绪的通道
			warkeUp()唤醒一个处于select状态的选择器 -- 当阻塞状态时,返回0个Channel
			close()关闭一个选择器,注册所有相关事件
		
		Selector注意事项
			注册到选择器的通道必须为非阻塞状态
			FileChannel不能用以Selector，因为FileChannel不能切换为非阻塞模式;套接字通道可以

		Selector SelectionKey
			Interest集合,Ready集合
			Channel通道
			Selector选择器
			obj附加值(注册时可以附加)


	NIO重写服务器
		监听客户端到达
		接收,并且回送客户端数据
		转发客户端数据到另外一个客户端
		多客户端的消息处理

		现有线程模型
				
									   |--Channel -- Thread A,B
							Selector --|--Channel -- Thread A,B
							   |	   |--Channel -- Thread A,B	
							   |
							 Thread

		单Thread模型
							Thread
							  |
						   Selector
							  |
					--------------------
					|		  |		   |
					Channel  Channel   Channel

		监听与数据处理线程分离
		

					Accepter						 Processor 
					 Thread   ----------------------  Thread ------------|
						|								 |  |		Processing---------线程池
						|                                |  |          loop
			   ServerSocketChannel						 |  |			 | 			
													     |	 ------------
														 |
													多SocketChannel	
													
                实现细节:
					ioProvider --提供了常用操作的抽象
							  |--注册输入channel及其回调,输出channel及其回调
							  |--注销输入channel,输出channel
							  |--输入回调的Runnable抽象
							  |--输出回调的Runnable抽象
							  
				    IoArgs.IoArgsEventListener -- 提供Io实现开始和完成发生事件的抽象
					
					SocketChannelAdapter.OnChannelStatusChangeListener  -- 信道状态变化事件的抽象
					
					SocketChannelAdapter -- 提供对外发送和接受的实现适配
										 -- 需要提供ioProvider的实现,OnChannelStatusChangeListener的实现
										 -- 异步发送 -- 需要提供IoArgs.IoArgsEventListener实现--该方法实际是往ioProvider注册信道的回调
										 -- 异步接受 -- 需要提供IoArgs.IoArgsEventListener实现--该方法实际是往ioProvider注册信道的回调
										 -- 提供关闭 -- 注销信道,关闭信道,信道关闭回调
										 
				
				版本v0.2.3--优化了读线程
					TCPServer--ServerSocketChannel注册了ACCEPT--结束客户端的连接
					接受到了客户端连接SocketChannel丢到ClientHandle里--异步线程处理
					在ClientHandle里起了一个Connector()处理读 Conector().setup(SocketChannel)里起了一个IOProvider
					IOProvider是一个程序启动时就构建在IOContext里的服务器处理支撑
					IOProvider起了一个读和一个写的线程处理Selector
					在setup()的时候就把ClientHandle的SoketChannel丢(register)进去,由IOProvider统一处理
					处理过程是这样的,如果register过了,下次进来就不register了,只修改Channel绑定在IOProvider的Select里的key的ops
					每次IoProvider处理完一个SocketChannel就丢弃它所对应的key的ops,因为是异步的,所以要避免重复处理
					因为已经丢弃了,所以Connector要把他捞回来(毕竟连接还没断开呢,人家还要你继续处理呢)
					所以是这样做的,Connector要传一个回调给IOProvider,这个回调的内容包括了读完数据要什么,当然也要包括重新注册(如果连接没断开的话)
					所以当我們的一個任务行完了后,要使用這個回调,所以我們的回调应该包裝在一個Runnable里的,包装过程在register那里就完成了
					register是锁定的,真正register进去的是<key,Runnable>,在SocketChannelAdapter里把inputCallback(Runnable)register进去
					丢每个客户端连接都是new 一个SocketChannelAdapter的
					
	IO vs NIO
		IO : 以流为导向,阻塞IO
		NIO : 以缓冲区为导向,非阻塞IO,Select选择器
		
		阻塞IO处理数据
			Stream -- Thread
			一条一条往下读...
		NIO线程处理数据
			Channel  Buffer       Thread
			|	       |read         |
			|<---------|-------------|<--|
			|  fill    |             |   |
			|--------->|             |   |
			|          | checkBuffer |   |
			|          |<------------|   |
		    |          |             |___|
		    |          |             |
		
		
		为什么异步--提高效率
		哪里降低了效率--阻塞
		减少阻塞--让更少的线程阻塞--最好是只有源头在阻塞--硬件
		为什么读写分离:
			数据从网卡读数据 -- 网卡才是真正阻塞的源头
			      网卡把数据碎片读进来 -- 上层再组装
				  网卡是读写分离的
				  
8.数据传输稳定性优化
	消息粘包
		1.TCP本质并不会发生数据层面的粘包
		2.TCP的发送方与接受方一定会确保数据是以一种有序的方式到达客户端
		3.并且会确保数据包完整
		
		1.UDP不保证消息完整性,所以UDP往往发生丢包等情况
		2.TCP数据传输具有:顺序性,完整性
		3.在常规Socket"粘包",并非数据传输层粘包
		
		"粘包"是数据处理逻辑层面上发送的粘包
		这里所有的"粘包":包含TCP,UDP甚至其他任意数据的数据交流方案
		Mina、Netty等框架从根本来说也是为了解决粘包而设计的高并发库
		
		多条数据粘在一起被当成一条
		
	消息不完整
		从数据的传输层面来讲TCP也不会发生数据丢失不全等情况
		一旦出现一定是TCP停止运行终止之时
		"数据不完整"依然针对的是数据的逻辑接受层面
		
		在物理传输层面来讲数据一定是能安全的完整的送达另一端
		但另一端可能缓冲区不够或者数据处理上不够完整导致数据只能读取一部分数据
		这种情况就称为"数据不完整","数据丢包",(拆包后业务处理层不知到接受到的数据被拆了,以为一个包就是完全的一条数据)
		有可能网卡读了很大的数据,然后buffer读满了就拿去用了,这也是消息不完整的情况
		
		m2(2)  m2(1)+m1  ==> 接收
		m2+m1(2)  m1(1)  ==> 接收后 --> 消息不完整
	
	复现消息传输错误
		多消息粘包
		单消息不完整
		消息到达后提醒重复触发(读消息时未设置取消监听)
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		